// Code generated by protoc-gen-go.
// source: mall_cache.proto
// DO NOT EDIT!

package cache

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type MallInfo struct {
	LimitCount       *int32 `protobuf:"varint,1,req,name=limit_count" json:"limit_count,omitempty"`
	Cd               *int64 `protobuf:"varint,2,req,name=cd" json:"cd,omitempty"`
	ConArgs          *int32 `protobuf:"varint,3,req,name=con_args" json:"con_args,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MallInfo) Reset()         { *m = MallInfo{} }
func (m *MallInfo) String() string { return proto.CompactTextString(m) }
func (*MallInfo) ProtoMessage()    {}

func (m *MallInfo) GetLimitCount() int32 {
	if m != nil && m.LimitCount != nil {
		return *m.LimitCount
	}
	return 0
}

func (m *MallInfo) GetCd() int64 {
	if m != nil && m.Cd != nil {
		return *m.Cd
	}
	return 0
}

func (m *MallInfo) GetConArgs() int32 {
	if m != nil && m.ConArgs != nil {
		return *m.ConArgs
	}
	return 0
}

func (m *MallInfo) SetLimitCount(value int32) {
	if m != nil {
		if m.LimitCount != nil {
			*m.LimitCount = value
			return
		}
		m.LimitCount = proto.Int32(value)
	}
}

func (m *MallInfo) SetCd(value int64) {
	if m != nil {
		if m.Cd != nil {
			*m.Cd = value
			return
		}
		m.Cd = proto.Int64(value)
	}
}

func (m *MallInfo) SetConArgs(value int32) {
	if m != nil {
		if m.ConArgs != nil {
			*m.ConArgs = value
			return
		}
		m.ConArgs = proto.Int32(value)
	}
}

type MallCache struct {
	MallList         map[int32]*MallInfo `protobuf:"bytes,1,rep,name=mall_list" json:"mall_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *MallCache) Reset()         { *m = MallCache{} }
func (m *MallCache) String() string { return proto.CompactTextString(m) }
func (*MallCache) ProtoMessage()    {}

func (m *MallCache) GetMallList() map[int32]*MallInfo {
	if m != nil {
		return m.MallList
	}
	return nil
}

func (m *MallCache) SetMallList(value map[int32]*MallInfo) {
	if m != nil {
		m.MallList = value
	}
}

func init() {
}
