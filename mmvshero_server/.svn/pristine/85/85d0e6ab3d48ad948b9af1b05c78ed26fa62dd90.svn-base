package chat

import (
	"Gameserver/global"
	"Gameserver/logic"
	. "Gameserver/logic"
	"common"
	"common/define"
	"common/protocol"
	"common/scheme"
	"fmt"
	. "galaxy"
	"time"

	"github.com/golang/protobuf/proto"
)

const (
	cache_chat_key_t = "Role:%v:Chat"
)

const (
	content_limit_per = 4
)

func genChatCacheKey(role_uid int64) string {
	return fmt.Sprintf(cache_chat_key_t, role_uid)
}

type ChatSys struct {
	owner           IRole
	cache_info_key  string
	chat_private_cd int64
	chat_world_cd   int64
}

func (this *ChatSys) Init(owner IRole) {
	this.owner = owner
	this.cache_info_key = genChatCacheKey(this.owner.GetUid())
}

func (this *ChatSys) Check() {
	_, err := GxService().Redis().Cmd("LTRIM", this.cache_info_key, 0, scheme.Commonmap[define.ChatPrivateShowNum].Value)
	if err != nil {
		LogFatal(err)
	}
}

func (this *ChatSys) ChatQuery() (common.RetCode, []*protocol.ChatInfo) {
	resp, err := GxService().Redis().Cmd("LRANGE", this.cache_info_key, 0, scheme.Commonmap[define.ChatPrivateShowNum].Value)
	if err != nil {
		LogFatal(err)
		return common.RetCode_Redis_Error, nil
	}

	chat_list, err := resp.List()
	if err != nil {
		LogFatal(err)
		return common.RetCode_Redis_Error, nil
	}

	chat_info := make([]*protocol.ChatInfo, len(chat_list))
	for index, v := range chat_list {
		temp := new(protocol.ChatInfo)
		err := proto.Unmarshal([]byte(v), temp)
		if err != nil {
			LogError(err)
			return common.RetCode_Proto_Error, nil
		}
		chat_info[index] = temp
	}
	return common.RetCode_Success, chat_info
}

func (this *ChatSys) Chat(chat_type protocol.ChatType, role_uid int64, content []byte) (common.RetCode, *protocol.ChatInfo) {
	now := time.Now().Unix()
	if len(content) > int(scheme.Commonmap[define.ChatWordsLimit].Value*content_limit_per) {
		return common.RetCode_ChatWordsTooLong, nil
	}

	switch chat_type {
	case protocol.ChatType_Private:
		if this.chat_private_cd > now {
			return common.RetCode_CD, nil
		}

		if role_uid <= 0 {
			return common.RetCode_ChatPrivateUidError, nil
		}

		info := &protocol.ChatInfo{
			TimeStamp: proto.Int64(now),
			Content:   content,
		}

		buf, err := proto.Marshal(info)
		if err != nil {
			LogError(err)
			return common.RetCode_Proto_Error, nil
		}

		_, err = GxService().Redis().Cmd("LPUSH", this.cache_info_key, buf)
		if err != nil {
			LogError(err)
			return common.RetCode_Redis_Error, nil
		}

		_, err = GxService().Redis().Cmd("LPUSH", genChatCacheKey(role_uid), buf)
		if err != nil {
			LogError(err)
			return common.RetCode_Redis_Error, nil
		}

		target := logic.GetRoleByUid(role_uid)
		if target != nil {
			global.SendMsg(int32(protocol.MsgCode_ChatNotify), target.GetSid(), buf)
		}

		this.chat_private_cd = now + 10
		return common.RetCode_Success, info

	case protocol.ChatType_World:
		if this.chat_world_cd > now {
			return common.RetCode_CD, nil
		}

		if !this.owner.CostChatFreeTime(true, true) {
			if !this.owner.IsEnoughGold(scheme.Commonmap[define.ChatNeedGold].Value) {
				return common.RetCode_RoleNotEnoughGold, nil
			}
			this.owner.CostGold(scheme.Commonmap[define.ChatNeedGold].Value, true, true)
		}

		info := &protocol.ChatInfo{
			TimeStamp: proto.Int64(now),
			Content:   content,
		}

		buf, err := proto.Marshal(info)
		if err != nil {
			LogError(err)
			return common.RetCode_Proto_Error, nil
		}

		global.SendBroadCast(int32(protocol.MsgCode_ChatNotify), 0, buf)

		this.chat_world_cd = now + 30
		return common.RetCode_Success, info
	}

	return common.RetCode_Failed, nil
}
