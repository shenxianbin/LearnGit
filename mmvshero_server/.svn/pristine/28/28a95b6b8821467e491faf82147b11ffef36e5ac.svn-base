package plunder

import (
	. "Gameserver/logic"
	"common"
	. "common/cache"
	"common/define"
	"common/protocol"
	"common/scheme"
	"errors"
	"fmt"
	. "galaxy"
	"math/rand"
	"time"

	"github.com/golang/protobuf/proto"
)

const (
	cache_plunder_key_t          = "Role:%v:Plunder"
	cache_plunder_team_autokey_t = "Role:%v:PlunderAutoKey"
	cache_plunder_team_list_t    = "Role:%v:PlunderTeam"
	cache_plunder_team_key_t     = "Role:%v:PlunderTeam:%v"
	cache_plunder_team_sheild    = ":Sheild"
)

const (
	QUERY_CD = 10
)

func genPlunderTeamCacheKey(role_uid int64, team_id int64) string {
	return fmt.Sprintf(cache_plunder_team_key_t, role_uid, team_id)
}

func genPlunderTeamAutoKey(role_uid int64) string {
	return fmt.Sprintf(cache_plunder_team_autokey_t, role_uid)
}

type PlunderTeam struct {
	PlunderTeamCache
	sheild bool
}

func (this *PlunderTeam) IsFinish() bool {
	scheme_data, _ := scheme.PlunderAwardmap[this.GetPlunderId()]
	if this.GetStartTime()+int64(scheme_data.EscortTime*3600) <= time.Now().Unix() {
		return true
	}

	return false
}

func (this *PlunderTeam) IsSheild() bool {
	return this.sheild
}

func (this *PlunderTeam) AddReport(report_id string) {
	this.PlunderTeamCache.ReportIds = append(this.PlunderTeamCache.ReportIds, report_id)
}

func (this *PlunderTeam) FillPlunderTeamInfo() *protocol.PlunderTeam {
	team_info := new(protocol.PlunderTeam)
	team_info.SetPos(this.GetPos())
	team_info.SetTeamId(this.GetTeamId())
	team_info.SetPlunderId(this.GetPlunderId())
	team_info.SetRoleUid(this.GetRoleUid())
	team_info.SetRoleName(this.GetRoleName())
	team_info.SetRoleLv(this.GetRoleLv())
	heros := make([]*protocol.PlunderHero, 0)
	for _, hero := range this.GetHeros() {
		hero_info := new(protocol.PlunderHero)
		hero_info.SetSchemeId(hero.GetSchemeId())
		hero_info.SetLv(hero.GetLv())
		hero_info.SetStage(hero.GetStage())
		hero_info.SetRank(hero.GetRank())
		hero_skills := make([]*protocol.PlunderHeroSkill, 0)
		for _, hero_skill := range hero.GetSkillList() {
			skill_info := new(protocol.PlunderHeroSkill)
			skill_info.SetSkillId(hero_skill.GetSkillId())
			skill_info.SetSkillLv(hero_skill.GetSkillLv())
			hero_skills = append(hero_skills, skill_info)
		}
		hero_info.SetSkillList(hero_skills)
		hero_info.SetProperties(hero.GetProperties())
		heros = append(heros, hero_info)
	}
	team_info.SetHeros(heros)
	team_info.SetStartTime(this.GetStartTime())
	award_infos := make([]*protocol.PlunderAward, 0)
	for _, award := range this.GetLeastAward() {
		award_info := new(protocol.PlunderAward)
		award_info.SetType(award.GetType())
		award_info.SetCode(award.GetCode())
		award_info.SetAmount(award.GetAmount())
		award_infos = append(award_infos, award_info)
	}
	team_info.SetLeastAward(award_infos)
	award_infos = make([]*protocol.PlunderAward, 0)
	for _, award := range this.GetMoreAward() {
		award_info := new(protocol.PlunderAward)
		award_info.SetType(award.GetType())
		award_info.SetCode(award.GetCode())
		award_info.SetAmount(award.GetAmount())
		award_infos = append(award_infos, award_info)
	}
	team_info.SetMoreAward(award_infos)
	team_info.SetSheild(this.sheild)
	LogDebug("team : ", this)

	return team_info
}

func (this *PlunderTeam) LoadSheild(key string) error {
	sheild_key := key + cache_plunder_team_sheild
	resp, err := GxService().Redis().Cmd("EXISTS", sheild_key)
	if err != nil {
		return err
	}

	row, err := resp.Int()
	if err != nil {
		return err
	}

	if row > 0 {
		this.sheild = true
	}

	return nil
}

func NewPlunderTeam(pos int32, role IRole, heros []int32, properties []int32, plunder_award_id int32) (*PlunderTeam, error) {
	resp, err := GxService().Redis().Cmd("INCR", genPlunderTeamAutoKey(role.GetUid()))
	if err != nil {
		return nil, err
	}

	team_id, _ := resp.Int64()
	team := new(PlunderTeam)
	team.PlunderTeamCache.SetPos(pos)
	team.PlunderTeamCache.SetTeamId(team_id)
	team.PlunderTeamCache.SetPlunderId(plunder_award_id)
	team.PlunderTeamCache.SetRoleUid(role.GetUid())
	team.PlunderTeamCache.SetRoleName(role.GetNickname())
	team.PlunderTeamCache.SetRoleLv(role.GetLv())
	plunder_heros := make([]*PlunderHeroCache, 0)
	for index, hero_id := range heros {
		hero := role.HeroGet(hero_id)
		if hero == nil {
			return nil, fmt.Errorf("NewPlunderTeam hero_uid[%v] error", hero_id)
		}
		plunder_hero := new(PlunderHeroCache)
		plunder_hero.SetSchemeId(hero.GetSchemeId())
		plunder_hero.SetLv(hero.GetLv())
		plunder_hero.SetStage(hero.GetStage())
		plunder_hero.SetRank(hero.GetRank())
		plunder_skills := make(map[int32]*PlunderHeroSkillCache)
		for _, skill := range hero.GetSkillList() {
			plunder_skill := new(PlunderHeroSkillCache)
			plunder_skill.SetSkillId(skill.GetSkillId())
			plunder_skill.SetSkillLv(skill.GetSkillLv())
			plunder_skills[skill.GetSkillId()] = plunder_skill
		}
		plunder_hero.SetSkillList(plunder_skills)
		plunder_hero.SetProperties(properties[index*2 : index*2+2])
		plunder_heros = append(plunder_heros, plunder_hero)
	}
	team.PlunderTeamCache.SetHeros(plunder_heros)
	team.PlunderTeamCache.SetStartTime(time.Now().Unix())
	err = genPlunderAward(plunder_award_id, team, role)
	if err != nil {
		return nil, err
	}
	team.PlunderTeamCache.SetReportIds(make([]string, 0))
	team.sheild = false

	return team, nil
}

func LoadPlunderTeam(key string) (*PlunderTeam, error) {
	resp, err := GxService().Redis().Cmd("GET", key)
	if err != nil {
		return nil, err
	}

	team := new(PlunderTeam)
	if buf, _ := resp.Bytes(); buf != nil {
		err := proto.Unmarshal(buf, &team.PlunderTeamCache)
		if err != nil {
			return nil, err
		}

		err = team.LoadSheild(key)
		if err != nil {
			return nil, err
		}

		return team, nil
	}

	return nil, errors.New("PlunderTeam Key Null")
}

func genPlunderAward(id int32, team *PlunderTeam, role IRole) error {
	scheme_data, has := scheme.PlunderAwardmap[id]
	if !has {
		return errors.New(fmt.Sprintf("PlunderAward Scheme Null : id (%v) ", id))
	}

	scheme_ex_data, has := scheme.PlunderAwardExmap[id]
	if !has {
		return errors.New(fmt.Sprintf("PlunderAward Scheme Null : id (%v) ", id))
	}

	//战力
	var fight_value float32 = 100.0

	total_plunder_award := make([]*PlunderAwardCache, 0)

	//魔魂
	total_soul := int32(float32(Rand(int64(scheme_ex_data.SoulAward[0]), int64(scheme_ex_data.SoulAward[1]))) * fight_value)
	soul_award := new(PlunderAwardCache)
	soul_award.SetType(int32(common.RTYPE_SOUL))
	soul_award.SetCode(0)
	soul_award.SetAmount(total_soul)
	total_plunder_award = append(total_plunder_award, soul_award)

	//骷髅币
	total_gold := int32(float32(Rand(int64(scheme_ex_data.GoldAward[0]), int64(scheme_ex_data.GoldAward[1]))) * fight_value)
	gold_award := new(PlunderAwardCache)
	gold_award.SetType(int32(common.RTYPE_GOLD))
	gold_award.SetCode(0)
	gold_award.SetAmount(total_gold)
	total_plunder_award = append(total_plunder_award, gold_award)

	//魔物
	find := false
	owner_soldier := role.SoldierAllId()
	if len(owner_soldier) > 0 {
		for i := 0; i < int(scheme_ex_data.SoldierAward.Num); i++ {
			find = false
			random := rand.Int31n(int32(len(owner_soldier)))
			soldier_id := owner_soldier[random]
			soldier_scheme, has := scheme.Soldiermap[soldier_id]
			if !has {
				return errors.New(fmt.Sprintf("Soldier Scheme Error : id (%v) ", soldier_id))
			}
			chip_id := soldier_scheme.NeedItemId
			chip_num := int32(Rand(int64(scheme_ex_data.SoldierAward.Flow[0]), int64(scheme_ex_data.SoldierAward.Flow[1])))
			for i, v := range total_plunder_award {
				if v.GetCode() == chip_id {
					total_plunder_award[i].SetAmount(total_plunder_award[i].GetAmount() + chip_num)
					find = true
					break
				}
			}
			if !find {
				temp := new(PlunderAwardCache)
				temp.SetType(int32(common.RTYPE_ITEM))
				temp.SetCode(chip_id)
				temp.SetAmount(chip_num)
				total_plunder_award = append(total_plunder_award, temp)
			}
		}
	}

	//魔使
	random_hero := rand.Int31n(100)
	if random_hero < scheme_data.HeroOdds && len(scheme_ex_data.HeroPool) > 0 {
		for i := 0; i < int(scheme_ex_data.HeroAward.Num); i++ {
			find = false
			random := rand.Int31n(int32(len(scheme_ex_data.HeroPool)))
			hero_id := scheme_ex_data.HeroPool[random]
			hero_scheme, has := scheme.Heromap[hero_id]
			if !has {
				return errors.New(fmt.Sprintf("Hero Scheme Error : id (%v) ", hero_id))
			}
			chip_id := hero_scheme.NeedItemId
			chip_num := int32(Rand(int64(scheme_ex_data.HeroAward.Flow[0]), int64(scheme_ex_data.HeroAward.Flow[1])))
			for i, v := range total_plunder_award {
				if v.GetCode() == chip_id {
					total_plunder_award[i].SetAmount(total_plunder_award[i].GetAmount() + chip_num)
					find = true
					break
				}
			}
			if !find {
				temp := new(PlunderAwardCache)
				temp.SetType(int32(common.RTYPE_ITEM))
				temp.SetCode(chip_id)
				temp.SetAmount(chip_num)
				total_plunder_award = append(total_plunder_award, temp)
			}
		}
	}

	more_plunder_award := make([]*PlunderAwardCache, len(total_plunder_award))
	for i, _ := range total_plunder_award {
		temp := new(PlunderAwardCache)
		temp.SetType(total_plunder_award[i].GetType())
		temp.SetCode(total_plunder_award[i].GetCode())

		num := total_plunder_award[i].GetAmount() * scheme_data.Quantity / 100.0
		if num < 1.0 {
			num = 1.0
		}
		total_plunder_award[i].SetAmount(total_plunder_award[i].GetAmount() - int32(num))
		temp.SetAmount(int32(num))
		more_plunder_award[i] = temp
	}

	team.PlunderTeamCache.SetLeastAward(total_plunder_award)
	team.PlunderTeamCache.SetMoreAward(more_plunder_award)

	return nil
}

type PlunderSys struct {
	PlunderCache

	owner          IRole
	team_list      map[int32]*PlunderTeam
	cache_key      string
	cache_list_key string
	query_cd       int64
}

func (this *PlunderSys) Init(owner IRole) {
	this.PlunderCache.Properties = make(map[int32]int32)
	this.PlunderCache.PlunderTeamLogs = make([]*PlunderTeamLogCache, 0)
	this.PlunderCache.PlunderLogs = make([]*PlunderLogCache, 0)

	this.SetCurrentMatchRoleUid(0)
	this.SetCurrentMatchTeamId(0)
	this.SetCurrentMatchIsRevenge(false)
	this.SetAttackTimesForDaily(0)
	this.SetCurrentMatchExpireTime(0)
	this.SetLastAttackTimeForDaily(0)
	this.SetPurchasedTimes(0)
	this.SetReportId(0)

	this.owner = owner
	this.team_list = make(map[int32]*PlunderTeam)
	this.cache_key = fmt.Sprintf(cache_plunder_key_t, this.owner.GetUid())
	this.cache_list_key = fmt.Sprintf(cache_plunder_team_list_t, this.owner.GetUid())
}

func (this *PlunderSys) Load() error {
	this.query_cd = time.Now().Unix()
	resp, err := GxService().Redis().Cmd("GET", this.cache_key)
	if err != nil {
		return err
	}

	if buf, _ := resp.Bytes(); buf != nil {
		err := proto.Unmarshal(buf, &this.PlunderCache)
		if err != nil {
			return err
		}
	}

	if this.PlunderCache.Properties == nil {
		this.PlunderCache.Properties = make(map[int32]int32)
	}

	err = this.LoadAllTeam()
	if err != nil {
		return err
	}

	return nil
}

func (this *PlunderSys) Save() {
	buf, err := proto.Marshal(&this.PlunderCache)
	if err != nil {
		LogFatal(err)
		return
	}

	if _, err := GxService().Redis().Cmd("SET", this.cache_key, buf); err != nil {
		LogFatal(err)
		return
	}
}

func (this *PlunderSys) LoadAllTeam() error {
	resp, err := GxService().Redis().Cmd("SMEMBERS", this.cache_list_key)
	if err != nil {
		return err
	}

	cacheKeys, err := resp.List()
	if err != nil {
		return err
	}

	for _, key := range cacheKeys {
		resp, err := GxService().Redis().Cmd("GET", key)
		if err != nil {
			GxService().Redis().Cmd("SREM", this.cache_list_key, key)
			continue
		}

		if buf, _ := resp.Bytes(); buf != nil {
			team := new(PlunderTeam)
			err := proto.Unmarshal(buf, &team.PlunderTeamCache)
			if err != nil {
				return err
			}

			err = team.LoadSheild(key)
			if err != nil {
				return err
			}

			this.team_list[team.GetPos()] = team
		}
	}

	return nil
}

func (this *PlunderSys) SaveTeam(team *PlunderTeam) error {
	buf, err := proto.Marshal(&team.PlunderTeamCache)
	if err != nil {
		LogFatal(err)
		return err
	}

	key := genPlunderTeamCacheKey(team.GetRoleUid(), team.GetTeamId())
	if _, err := GxService().Redis().Cmd("SET", key, buf); err != nil {
		LogFatal(err)
		return err
	}

	if _, err := GxService().Redis().Cmd("SADD", fmt.Sprintf(cache_plunder_team_list_t, team.GetRoleUid()), key); err != nil {
		LogFatal(err)
		return err
	}

	return nil
}

func (this *PlunderSys) DelTeam(team_id int64) error {
	key := genPlunderTeamCacheKey(this.owner.GetUid(), team_id)
	LogDebug(key)
	if _, err := GxService().Redis().Cmd("DEL", key); err != nil {
		LogFatal(err)
		return err
	}

	sheild_key := key + cache_plunder_team_sheild
	LogDebug(sheild_key)
	if _, err := GxService().Redis().Cmd("DEL", sheild_key); err != nil {
		LogFatal(err)
		return err
	}

	if _, err := GxService().Redis().Cmd("SREM", this.cache_list_key, key); err != nil {
		LogFatal(err)
		return err
	}

	return nil
}

func (this *PlunderSys) FillAllPlunderTeamInfo() []*protocol.PlunderTeam {
	infos := make([]*protocol.PlunderTeam, 0)
	for _, v := range this.team_list {
		infos = append(infos, v.FillPlunderTeamInfo())
	}

	return infos
}

func (this *PlunderSys) PlunderUnLockProperties(id int32) {
	if id == 0 {
		return
	}

	this.PlunderCache.Properties[id] = id
	this.Save()
}

func (this *PlunderSys) PlunderQuery() (common.RetCode, []*protocol.PlunderTeam) {
	if this.query_cd+QUERY_CD > time.Now().Unix() {
		LogDebug(this.team_list)
		return common.RetCode_Success, this.FillAllPlunderTeamInfo()
	}

	this.team_list = make(map[int32]*PlunderTeam)
	if err := this.LoadAllTeam(); err != nil {
		return common.RetCode_Redis_Error, nil
	}
	this.query_cd = time.Now().Unix()
	LogDebug(this.team_list)

	return common.RetCode_Success, this.FillAllPlunderTeamInfo()
}

func (this *PlunderSys) PlunderGuard(pos int32, heros []int32, properties []int32, plunder_award_id int32) (*protocol.PlunderTeam, common.RetCode) {
	LogDebug("pos : ", pos, " heros : ", heros, " pro : ", properties, " award : ", plunder_award_id)
	LogDebug(this.team_list)
	if _, has := this.team_list[pos]; has {
		return nil, common.RetCode_PlunderPosNotEmpty
	}

	if len(heros) == 0 {
		return nil, common.RetCode_PlunderHeroEmpty
	}

	if len(heros) != len(properties)/2 {
		return nil, common.RetCode_Failed
	}

	can_team := this.owner.GetPlunderTeam()
	LogDebug("can_team : ", can_team)
	if pos > int32(len(can_team)) {
		return nil, common.RetCode_PlunderTeamUnLock
	}

	if can_team[pos-1] < int32(len(heros)) {
		return nil, common.RetCode_PlunderTeamHeroLong
	}

	for _, v := range properties {
		if v == 0 {
			continue
		}

		if _, has := this.PlunderCache.GetProperties()[v]; !has {
			return nil, common.RetCode_PlunderTeamPropertiesError
		}
	}

	team, err := NewPlunderTeam(pos, this.owner, heros, properties, plunder_award_id)
	if err != nil {
		LogError(err)
		return nil, common.RetCode_Failed
	}

	this.team_list[team.GetPos()] = team
	this.SaveTeam(team)

	totalExp := scheme.RoleLvUpmap[this.owner.GetLv()].TotalExp + this.owner.GetExp()
	this.EnrollPool(this.owner.GetUid(), team.GetTeamId(), int64(totalExp))

	return team.FillPlunderTeamInfo(), common.RetCode_Success
}

func (this *PlunderSys) PlunderAward(pos int32) common.RetCode {
	team, has := this.team_list[pos]
	if !has {
		return common.RetCode_PlunderTeamNotExist
	}

	if !team.IsFinish() {
		return common.RetCode_PlunderTeamNotFinish
	}

	team, err := LoadPlunderTeam(genPlunderTeamCacheKey(team.GetRoleUid(), team.GetTeamId()))
	if err != nil {
		LogError(err)
		return common.RetCode_Redis_Error
	}

	this.plunder_award(team.GetLeastAward())
	this.plunder_award(team.GetMoreAward())

	if time.Now().Unix() < team.GetStartTime()+int64(scheme.Commonmap[define.PlunderReportLife].Value) {
		this.PlunderAddTeamLog(team.GetTeamId(), team.GetStartTime(), team.GetReportIds())
	}

	delete(this.team_list, pos)
	this.DelTeam(team.GetTeamId())
	LogDebug(this.team_list)

	this.RemoveFromPool(this.owner.GetUid(), team.GetTeamId())

	return common.RetCode_Success
}

func (this *PlunderSys) PlunderSheild(pos int32) common.RetCode {
	team, has := this.team_list[pos]
	if !has {
		return common.RetCode_PlunderTeamNotExist
	}

	if team.IsFinish() {
		return common.RetCode_PlunderTeamFinish
	}

	sheild_key := genPlunderTeamCacheKey(team.GetRoleUid(), team.GetTeamId()) + cache_plunder_team_sheild
	LogDebug("sheild_key : ", sheild_key)
	resp, err := GxService().Redis().Cmd("EXISTS", sheild_key)
	if err != nil {
		return common.RetCode_Redis_Error
	}

	row, err := resp.Int()
	if err != nil {
		return common.RetCode_Redis_Error
	}

	if row > 0 {
		return common.RetCode_PlunderTeamSheildAlready
	}

	scheme_data, has := scheme.PlunderAwardmap[team.GetPlunderId()]
	if !has {
		LogError("PlunderAward Scheme Null : id (", team.GetPlunderId(), ") ")
		return common.RetCode_SchemeData_Error
	}

	rest_time := int32(time.Now().Unix() - team.GetStartTime() + int64(scheme_data.EscortTime*3600))
	gold := ResourceToCoin(common.RTYPE_TIME, rest_time)

	if !this.owner.IsEnoughGold(gold) {
		return common.RetCode_RoleNotEnoughGold
	}

	this.owner.CostGold(gold, true, true)

	if _, err := GxService().Redis().Cmd("SET", sheild_key, 1); err != nil {
		LogFatal(err)
		return common.RetCode_Redis_Error
	}
	team.sheild = true

	return common.RetCode_Success
}

func (this *PlunderSys) plunder_award(award []*PlunderAwardCache) {
	for _, v := range award {
		switch v.GetType() {
		case common.RTYPE_SOUL:
			this.owner.AddSoul(v.GetAmount(), true, true)
		case common.RTYPE_GOLD:
			this.owner.AddGold(v.GetAmount(), true, true)
		case common.RTYPE_ITEM:
			this.owner.ItemAdd(v.GetCode(), v.GetAmount(), true)
		}
	}
}
