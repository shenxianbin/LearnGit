package scheme

import (
	"encoding/json"
	"fmt"
	. "galaxy"
	"os"
)

type KingSkillCost struct {
	 Id 	 int32
	 BaseId 	 int32
	 Name 	 string
	 UseNum 	 int32
	 UseEnergy 	 int32

}

var KingSkillCosts []*KingSkillCost
var KingSkillCostmap map[int32]*KingSkillCost

func LoadKingSkillCost(filepath string) {
    fileName := "KingSkillCost.json"
	file, err := os.Open(fmt.Sprintf("%s/%s", filepath, fileName))
	if err != nil {
		panic(fmt.Sprintf("Read [file ：%s]occurs error: %s", fileName, err))
	}
	defer file.Close()

	dec := json.NewDecoder(file)
	_, err = dec.Token()
	if err != nil {
		panic(fmt.Sprintf("Read [file ：%s]occurs error: %s", fileName, err))
	}

	KingSkillCostmap = make(map[int32]*KingSkillCost)
	for dec.More() {
		var temp KingSkillCost
		err := dec.Decode(&temp)
		if err != nil {
			panic(fmt.Sprintf("Read [file ：%s]occurs error: %s", fileName, err))
		}
		KingSkillCosts = append(KingSkillCosts, &temp)
		KingSkillCostmap[temp.Id] = &temp
	}

	LogInfo("Load KingSkillCost Scheme Success!")
}
