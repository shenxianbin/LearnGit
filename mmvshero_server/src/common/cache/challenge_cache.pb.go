// Code generated by protoc-gen-go.
// source: challenge_cache.proto
// DO NOT EDIT!

package cache

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ChallengeLayer struct {
	LayerId          *int32               `protobuf:"varint,1,req,name=layer_id" json:"layer_id,omitempty"`
	WaveInfo         map[int32]int32      `protobuf:"bytes,2,rep,name=wave_info" json:"wave_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	BanBuildingType  *int32               `protobuf:"varint,3,req,name=ban_building_type" json:"ban_building_type,omitempty"`
	BanSoldierId     *int32               `protobuf:"varint,4,req,name=ban_soldier_id" json:"ban_soldier_id,omitempty"`
	BanKingskillId   *int32               `protobuf:"varint,5,req,name=ban_kingskill_id" json:"ban_kingskill_id,omitempty"`
	Awards           []*PlunderAwardCache `protobuf:"bytes,6,rep,name=awards" json:"awards,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ChallengeLayer) Reset()         { *m = ChallengeLayer{} }
func (m *ChallengeLayer) String() string { return proto.CompactTextString(m) }
func (*ChallengeLayer) ProtoMessage()    {}

func (m *ChallengeLayer) GetLayerId() int32 {
	if m != nil && m.LayerId != nil {
		return *m.LayerId
	}
	return 0
}

func (m *ChallengeLayer) GetWaveInfo() map[int32]int32 {
	if m != nil {
		return m.WaveInfo
	}
	return nil
}

func (m *ChallengeLayer) GetBanBuildingType() int32 {
	if m != nil && m.BanBuildingType != nil {
		return *m.BanBuildingType
	}
	return 0
}

func (m *ChallengeLayer) GetBanSoldierId() int32 {
	if m != nil && m.BanSoldierId != nil {
		return *m.BanSoldierId
	}
	return 0
}

func (m *ChallengeLayer) GetBanKingskillId() int32 {
	if m != nil && m.BanKingskillId != nil {
		return *m.BanKingskillId
	}
	return 0
}

func (m *ChallengeLayer) GetAwards() []*PlunderAwardCache {
	if m != nil {
		return m.Awards
	}
	return nil
}

func (m *ChallengeLayer) SetLayerId(value int32) {
	if m != nil {
		if m.LayerId != nil {
			*m.LayerId = value
			return
		}
		m.LayerId = proto.Int32(value)
	}
}

func (m *ChallengeLayer) SetWaveInfo(value map[int32]int32) {
	if m != nil {
		m.WaveInfo = value
	}
}

func (m *ChallengeLayer) SetBanBuildingType(value int32) {
	if m != nil {
		if m.BanBuildingType != nil {
			*m.BanBuildingType = value
			return
		}
		m.BanBuildingType = proto.Int32(value)
	}
}

func (m *ChallengeLayer) SetBanSoldierId(value int32) {
	if m != nil {
		if m.BanSoldierId != nil {
			*m.BanSoldierId = value
			return
		}
		m.BanSoldierId = proto.Int32(value)
	}
}

func (m *ChallengeLayer) SetBanKingskillId(value int32) {
	if m != nil {
		if m.BanKingskillId != nil {
			*m.BanKingskillId = value
			return
		}
		m.BanKingskillId = proto.Int32(value)
	}
}

func (m *ChallengeLayer) SetAwards(value []*PlunderAwardCache) {
	if m != nil {
		m.Awards = value
	}
}

type ChallengeCache struct {
	ChallengeCount      *int32                    `protobuf:"varint,1,req,name=challenge_count" json:"challenge_count,omitempty"`
	ChallengeChance     *int32                    `protobuf:"varint,2,req,name=challenge_chance" json:"challenge_chance,omitempty"`
	CurLayer            *int32                    `protobuf:"varint,3,req,name=cur_layer" json:"cur_layer,omitempty"`
	FreshTime           *int64                    `protobuf:"varint,4,req,name=fresh_time" json:"fresh_time,omitempty"`
	ChallengeResetTimes *int32                    `protobuf:"varint,5,req,name=challenge_reset_times" json:"challenge_reset_times,omitempty"`
	Layer               map[int32]*ChallengeLayer `protobuf:"bytes,6,rep,name=layer" json:"layer,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized    []byte                    `json:"-"`
}

func (m *ChallengeCache) Reset()         { *m = ChallengeCache{} }
func (m *ChallengeCache) String() string { return proto.CompactTextString(m) }
func (*ChallengeCache) ProtoMessage()    {}

func (m *ChallengeCache) GetChallengeCount() int32 {
	if m != nil && m.ChallengeCount != nil {
		return *m.ChallengeCount
	}
	return 0
}

func (m *ChallengeCache) GetChallengeChance() int32 {
	if m != nil && m.ChallengeChance != nil {
		return *m.ChallengeChance
	}
	return 0
}

func (m *ChallengeCache) GetCurLayer() int32 {
	if m != nil && m.CurLayer != nil {
		return *m.CurLayer
	}
	return 0
}

func (m *ChallengeCache) GetFreshTime() int64 {
	if m != nil && m.FreshTime != nil {
		return *m.FreshTime
	}
	return 0
}

func (m *ChallengeCache) GetChallengeResetTimes() int32 {
	if m != nil && m.ChallengeResetTimes != nil {
		return *m.ChallengeResetTimes
	}
	return 0
}

func (m *ChallengeCache) GetLayer() map[int32]*ChallengeLayer {
	if m != nil {
		return m.Layer
	}
	return nil
}

func (m *ChallengeCache) SetChallengeCount(value int32) {
	if m != nil {
		if m.ChallengeCount != nil {
			*m.ChallengeCount = value
			return
		}
		m.ChallengeCount = proto.Int32(value)
	}
}

func (m *ChallengeCache) SetChallengeChance(value int32) {
	if m != nil {
		if m.ChallengeChance != nil {
			*m.ChallengeChance = value
			return
		}
		m.ChallengeChance = proto.Int32(value)
	}
}

func (m *ChallengeCache) SetCurLayer(value int32) {
	if m != nil {
		if m.CurLayer != nil {
			*m.CurLayer = value
			return
		}
		m.CurLayer = proto.Int32(value)
	}
}

func (m *ChallengeCache) SetFreshTime(value int64) {
	if m != nil {
		if m.FreshTime != nil {
			*m.FreshTime = value
			return
		}
		m.FreshTime = proto.Int64(value)
	}
}

func (m *ChallengeCache) SetChallengeResetTimes(value int32) {
	if m != nil {
		if m.ChallengeResetTimes != nil {
			*m.ChallengeResetTimes = value
			return
		}
		m.ChallengeResetTimes = proto.Int32(value)
	}
}

func (m *ChallengeCache) SetLayer(value map[int32]*ChallengeLayer) {
	if m != nil {
		m.Layer = value
	}
}

func init() {
}
