// Code generated by protoc-gen-go.
// source: sign_cache.proto
// DO NOT EDIT!

package cache

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type SignCache struct {
	YearMonth        *int32 `protobuf:"varint,1,req,name=year_month" json:"year_month,omitempty"`
	Count            *int32 `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	DayIndex         *int32 `protobuf:"varint,3,req,name=day_index" json:"day_index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SignCache) Reset()         { *m = SignCache{} }
func (m *SignCache) String() string { return proto.CompactTextString(m) }
func (*SignCache) ProtoMessage()    {}

func (m *SignCache) GetYearMonth() int32 {
	if m != nil && m.YearMonth != nil {
		return *m.YearMonth
	}
	return 0
}

func (m *SignCache) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *SignCache) GetDayIndex() int32 {
	if m != nil && m.DayIndex != nil {
		return *m.DayIndex
	}
	return 0
}

func (m *SignCache) SetYearMonth(value int32) {
	if m != nil {
		if m.YearMonth != nil {
			*m.YearMonth = value
			return
		}
		m.YearMonth = proto.Int32(value)
	}
}

func (m *SignCache) SetCount(value int32) {
	if m != nil {
		if m.Count != nil {
			*m.Count = value
			return
		}
		m.Count = proto.Int32(value)
	}
}

func (m *SignCache) SetDayIndex(value int32) {
	if m != nil {
		if m.DayIndex != nil {
			*m.DayIndex = value
			return
		}
		m.DayIndex = proto.Int32(value)
	}
}

func init() {
}
